@model IEnumerable<EmmasEngines.Models.Inventory>
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json;
@using EmmasEngines.Utilities;
@inject IHttpContextAccessor HttpContextAccessor;

@{
	ViewData["Title"] = "Index";
	Html.AntiForgeryToken();
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
<script src="https://kit.fontawesome.com/f8c88d6b79.js" crossorigin="anonymous"></script>
<link rel="stylesheet" href="~/css/styles.css" asp-append-version="true" />
<main>
	<section id="pageName">
		<h1>POS</h1>
	</section>
	<script src="/lib/jquery/dist/jquery.min.js"></script>

	<section id="customerSearch">
		<label id="searchHeader" class="control-label">Search Customer: </label>
		@*Customer Details*@
		<form id="search-form" action="@Url.Action("SearchCustomer")" method="post">
			<input type="text" name="SearchString" placeholder="Search by name or phone. Eg. 'John' or '1234'" />
			<button type="submit" name="actionButton" value="FilterCustomer"><i class="fa fa-search" aria-hidden="true"></i> - Search</button>

		</form>
		<div id="customer-details">
			@if (TempData.ContainsKey("CustomerDetails"))
			{
				//Html.RenderPartial("_CustomerDetails", TempData["CustomerDetails"]);
				await Html.PartialAsync("_CustomerDetails", TempData["CustomerDetails"]);
			}
		</div>
		@*When pressed, Modal box of Customer Name, Phone, Address, Postal*@
		<div class="btn_crud">
			<button type="submit" name="actionButton" value="customerDetails" tabindex="190" class="" onclick="" aria-label="button to show customer details">
				<i class="fa fa-info" aria-hidden="true"></i> - Customer Details
			</button>
		</div>
		@*When pressed, Modal box to add customer. Set cart to this customer.*@
		<div class="btn_crud">
			<button type="submit" name="actionButton" value="addCustomer" tabindex="190" class="" onclick="" aria-label="button to add customer">
				<i class="fa fa-plus-square" aria-hidden="true"></i> - Add Customer
			</button>
		</div>

	</section>

	<form asp-action="Index" method="get">



		<div class="form-horizontal">



			@*Search Inventory by name (+ buttons to submit, clear)*@
			<section id="inventorySearch" style="">
				<h2><label id="searchHeader" class="control-label">Search Inventory: </label></h2>
				<input class="form-control" id="SearchString" name="SearchString" type="text" placeholder="Enter UPC Eg. ###-####-# or Inventory Name Eg. Mower">
				<div class="btn">
					<div class="btn_crud">
						<button type="submit" name="actionButton" value="Filter" tabindex="190" class="btn_crud_edit" onclick="" aria-label="button for edit items">
							<i class="fa fa-filter" aria-hidden="true"></i>
						</button>
						<span class="btn_tooltip">Filter</span>
					</div>
					<div class="btn_crud">
						<button type="submit" name="actionButton" value="FilterInventory" tabindex="190" class="btn_crud_edit" asp-action="Index" aria-label="button for edit items">
							<i class="fa fa-eraser" aria-hidden="true"></i>
						</button>
						<span class="btn_tooltip">Clear</span>
					</div>             
				</div>
			</section>
		</div>

		<div id="inventoryMain">
			<div class=" divider2_desc_btn">
				<div class="description">

					<table class="table table-striped" id="inventoryTable">
						<thead>
							<tr class="bg-info">
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.UPC)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.Name)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.Size)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.Quantity)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.AdjustedPrice)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.MarkupPrice)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.Current)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.TotalStock)
								</th>
								<th>
									<label>Add to Cart</label>
								</th>
								<th></th>
							</tr>
						</thead>
						<tbody id="inventoryData">
							@foreach (var item in Model)
							{
								<tr class="table-hover">
									<td>
										@Html.DisplayFor(modelItem => item.UPC)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Name)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Size)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Quantity)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.AdjustedPrice)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.MarkupPrice)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Current)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.TotalStock)
									</td>
									<td>
										<a href="@Url.Action("Buy", "POS", new {UPC = item.UPC})"><i class="fa fa-plus-square" aria-hidden="true" style="color:black"></i></a>
									</td>
									<td>
										@*blank space to eliminate white space for 'add to cart' header*@
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
			
		</div>
		<partial name="_PagingNavBar" />
		<div class="cart">
			@*Create a new table with headers for "Name", "Price", "Quantity".*@
			@*Table starts empty. Items are added by POSController.AddToCart, returning a single JSON inventory object*@
			@*The table is then populated with the JSON object*@
			@*The table is then updated every time a new item is added to the cart*@
			<h1>Cart</h1>
			<table class="table table-striped" id="invoiceTable">
				<thead>
					<tr class="bg-info">
						<th>
							<input type="submit" disabled="disabled" value="Name" class="tableHeaders" />
						</th>
						<th>
							<input type="submit" disabled="disabled" value="Price" class="tableHeaders" />
						</th>
						<th>
							<input type="submit" disabled="disabled" value="Quantity" class="tableHeaders" />
						</th>
						<th>
							<label>Remove from Cart</label>
						</th>
					</tr>
				</thead>
				<tbody id="cartData">
					@*add a new item (name, price, quantity) by a given UPC code*@
					@*the item is added to the cart, and the cart is updated*@
					@*the cart is then displayed in the table*@
					@*Use the "Buy(string UPC) function / HttpContext.Session["cart"] to update the table *@
					
				@{
						var cart = (List<Inventory>)HttpContextAccessor.HttpContext.Session.GetObjectFromJson<List<Inventory>>("cart");
						if(cart != null)
						{		
							foreach (Inventory item in cart)
							{
																	<tr class="table-hover">
																		<td>
																			@Html.DisplayFor(modelItem => item.Name)
																		</td>
																		<td>
																			@Html.DisplayFor(modelItem => item.AdjustedPrice)
																		</td>
																		<td>
																			@Html.DisplayFor(modelItem => item.Quantity)
																		</td>
																		<td>
																			<a href="@Url.Action("RemoveFromCart", "POS", new {UPC = item.UPC})"><i class="fa fa-minus-square" aria-hidden="true" style="color:black"></i></a>
																		</td>
																	</tr>
							}
						}
					}
				</tbody>
			</table>
			<div id="cartSummaryData">
				@*Subtotal, Tax, Total, Paid, Change*@
				@*Using Summary, returning json result of these properties, display in an unordered list*@
				@*Use the "Summary" function to update the summary data *@
				@*Use the "ClearCart" function to clear the cart and the summary data *@
				@*Use the "Pay" function to display the payment data *@
				@*Use the "Pay" function to clear the cart and the summary data *@
				<ul class="list-group list-group-flush">
					@{
						double total = 0;
						double tax = 0;
						double subtotal = 0;
						double paid = 0;
						double change = 0;

						if(cart != null)
						{
							foreach (Inventory item in cart)
							{
								subtotal += item.AdjustedPrice;
								tax = subtotal * 0.13;
								total = subtotal + tax;
							}
						}
															<li>Subtotal: @subtotal.ToString("C")</li>
															<li>Tax: @tax.ToString("C")</li>
															<li>Total: @total.ToString("C")</li>
															<li>Paid: @paid.ToString("C")</li>
															<li>Change: @change.ToString("C")</li>	
					}
				</ul>
			</div>
			<div id="cartPayment">
				@*Payment Type: user selects between cash, debit, credit, or cheque (radio buttons? user can only select one option at a time). User enters payment amount in an input on the next line.*@
				@*Checkout, Clear buttons*@
				@*Use the "Pay" function to update the payment data *@
				@*Use the "Pay" function to clear the cart and the summary data *@
				@*Use the "ClearCart" function to clear the cart and the summary data *@
				<form id="paymentForm" method="post" action="@Url.Action("Create", "Invoices")">
					<div>
						<input type="radio" id="cash" name="paymentType" value="Cash" required>
						<label for="cash">Cash</label>
					</div>
					<div>
						<input type="radio" id="debit" name="paymentType" value="Debit" required>
						<label for="debit">Debit</label>
					</div>
					<div>
						<input type="radio" id="credit" name="paymentType" value="Credit" required>
						<label for="credit">Credit</label>
					</div>
					<div>
						<input type="radio" id="cheque" name="paymentType" value="Cheque" required>
						<label for="cheque">Cheque</label>
					</div>
					<div>
						<label for="paymentAmount">Payment Amount:</label>
						<input type="text" id="paymentAmount" name="paymentAmount" placeholder="Enter payment amount" required>
					</div>
					<button name="actionButton" value="Pay" type="submit" class="btn btn-primary" onclick="submitForm(event)">Pay</button>
					<input name ="actionButton" type="submit" value="Clear" class="btn btn-primary" />
				</form>
			</div>
		</div>

		
	</form>
</main>



<script>
	console.log("Javascript loaded...")
	$(function () {
		$('form').submit(function (event) {
			var form = $(this);
			var url = form.attr('action');
			var data = form.serialize();
			var filterButton = form.find('button[name="actionButton"]');

			if (filterButton.length && filterButton.val() === "FilterCustomer") {
				event.preventDefault();
				$.ajax({
					url: url,
					type: 'POST',
					data: data,
					success: function (result) {
						$('#customer-details').html(result);
						sessionStorage.setItem('customerDetails', result);
					}
				});
			}
		});
	});

	var customerDetails = sessionStorage.getItem('customerDetails');
	if (customerDetails !== null) {
		$('#customer-details').html(customerDetails);
	}
	function submitForm(e) {
		console.log("Event: " + e);
		e.preventDefault();
		var form = $('#paymentForm');
		var url = form.attr('action');
		var customerID = $('#CustomerID').val(); // get the customer ID from the hidden input field
		var date = new Date().toISOString().substr(0, 10); // get today's date
		var invoiceModel = {
			Date: date,
			Appreciation: 5.00,
			Description: "Invoice",
			CustomerID: customerID,
			EmployeeID: 1
		};
		var payButton = form.find('button[name="actionButton"][value="Pay"]');

		console.log("Invoice Model:", invoiceModel);

		$.ajax({
			url: '/Invoices/Create',
			dataType: 'json',
			contentType: 'application/json',
			type: 'POST',
			data: JSON.stringify(invoiceModel),
			//beforeSend: function (xhr) {
			//	xhr.setRequestHeader("X-CSRF-TOKEN", $('input[name="__RequestVerificationToken"]').val());
			//},
			success: function (result) {
				console.log("submitForm (Payment) result: " + result);
				if (result) {
					alert("Payment success: Invoice ID " + result.id + " for CustomerID: " + result.customerID + " was added on " + result.date);
					payButton.prop('disabled', true);
				} else {
					alert("payment failed");
					//provide error message
				}
			},
			error: function (xhr, status, error) {
				console.log("submitForm error:", error);
				console.log("submitForm xhr:", xhr);
				console.log("submitForm status:", status);
			}
		});
	}






</script>








