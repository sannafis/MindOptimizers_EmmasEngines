@model IEnumerable<EmmasEngines.Models.Inventory>
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json;
@using EmmasEngines.Utilities;
@inject IHttpContextAccessor HttpContextAccessor;

@{
	ViewData["Title"] = "Index";
	Html.AntiForgeryToken();
	var customers = (List<Customer>)HttpContextAccessor.HttpContext.Session.GetObjectFromJson<List<Customer>>("customers");
	// get list of customer full names
	var customerNames = customers.Select(c => c.FullName).ToList();
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
<script src="https://kit.fontawesome.com/f8c88d6b79.js" crossorigin="anonymous"></script>
<link rel="stylesheet" href="~/css/styles.css" asp-append-version="true" />

@*Display elements of search container in an organized way *@
<style>
	.search_container {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 1rem;
		border: 1px solid #ccc;
		border-radius: 5px;
		background-color: #f5f5f5;
		width: 100%;
		max-width: 600px;
		margin: 0 auto;
	}

	.search_form_wrapper {
		display: flex;
		align-items: center;
	}

	.form-inline {
		display: flex;
		align-items: center;
	}

	.btnCustView{
		margin-left:10px;
	}

	.btn_tooltip {
		display: inline-block;
		margin-left: 5px;
		font-size: 14px;
	}

	#inputCustomer {
		padding: 6px;
		font-size: 14px;
		border-radius: 4px;
		border: 1px solid #ccc;
	}

</style>

<main>
	<section id="pageName">
		<h1>POS</h1>
	</section>
	<script src="/lib/jquery/dist/jquery.min.js"></script>
	
	<section  id="customerSearch">
		<div class="search_container">
			<label id="searchHeader" class="control-label">Search Customer: </label>
			@*Customer Details*@

			<datalist id="customerNames">
				@foreach (var name in customerNames)
				{
					<option value="@name" />
				}
			</datalist>

			<div class="search_form_wrapper">
				<form id="search-form" class="form-inline" action="@Url.Action("SearchCustomer")" method="post">
					<input id="inputCustomer" type="text" class="customer-list" name="SearchString" placeholder="Search by name or phone. Eg. 'John' or '1234'" list="customerNames" />
					@**@

					<button type="submit" class="btnCustView" name="actionButton" value="FilterCustomer">
						<i class="fa fa-search" aria-hidden="true"></i> - Search
					</button>
				</form>
				<p><strong>OR</strong></p>
				@*When pressed, Modal box to add customer. Set cart to this customer.*@
				<form class="form-inline" action="@Url.Action("Create", "Customers")" method="get">
					<button type="submit" class="btnCustView"><i class="fa fa-plus" aria-hidden="true"></i> Add New Customer</button>
				</form>
			</div>
		</div>
		<div id="customer-details" class="customer-details">
			@if (TempData.ContainsKey("CustomerDetails"))
			{
				//Html.RenderPartial("_CustomerDetails", TempData["CustomerDetails"]);
				await Html.PartialAsync("_CustomerDetails", TempData["CustomerDetails"]);
			}
		</div>
		
		
	</section>

	


	<form asp-action="Index" method="get">
		<div class="form-horizontal">



			@*Search Inventory by name (+ buttons to submit, clear)*@
			<section id="inventorySearch" style="">
				<h2><label id="searchHeader" class="control-label">Search Inventory: </label></h2>
				<input class="form-control" id="SearchString" name="SearchString" type="text" placeholder="Enter UPC Eg. ###-####-# or Inventory Name Eg. Mower">
				<div class="btn">
					<div class="btn_crud">
						<button type="submit" name="actionButton" value="Filter" tabindex="190" class="btn_crud_edit" onclick="" aria-label="button for edit items">
							<i class="fa fa-filter" aria-hidden="true"></i>
						</button>
						<span class="btn_tooltip">Filter</span>
					</div>
					<div class="btn_crud">
						<button type="submit" name="actionButton" value="FilterInventory" tabindex="190" class="btn_crud_edit" asp-action="Index" aria-label="button for edit items">
							<i class="fa fa-eraser" aria-hidden="true"></i>
						</button>
						<span class="btn_tooltip">Clear</span>
					</div>
				</div>
			</section>
		</div>


		
		<div id="inventoryMain">
			<div class=" divider2_desc_btn">
				<div class="description">

					<table class="table table-striped" id="inventoryTable">
						<thead>
							<tr class="bg-info">
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.UPC)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.Name)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.Size)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.Quantity)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.AdjustedPrice)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.MarkupPrice)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.Current)
								</th>
								<th>
									@Html.DisplayNameFor(modelItem => modelItem.TotalStock)
								</th>
								<th>
									<label>Add to Cart</label>
								</th>
								<th></th>
							</tr>
						</thead>
						<tbody id="inventoryData">
							@foreach (var item in Model)
							{
								<tr class="table-hover">
									<td>
										@Html.DisplayFor(modelItem => item.UPC)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Name)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Size)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Quantity)
									</td>
									<td>
										@*Adjusted price (CostAVG)*@

										@Html.DisplayFor(modelItem => item.AdjustedPrice)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.MarkupPrice)
									</td>
									<td>
										@if (item.Current)
										{
											//feather icon check
											<span class="fa-solid fa-check"></span>
										}
										else
										{
											//feather icon x
											<span class="fa-solid fa-x"></span>
										}
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.TotalStock)
									</td>
									<td>
										<a href="@Url.Action("Buy", "POS", new {UPC = item.UPC})"><i class="fa fa-plus-square" aria-hidden="true" style="color:black"></i></a>
									</td>
									<td>
										@*blank space to eliminate white space for 'add to cart' header*@
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>

		</div>
		<partial name="_PagingNavBar" />
		<div class="cart">
			@*Create a new table with headers for "Name", "Price", "Quantity".*@
			@*Table starts empty. Items are added by POSController.AddToCart, returning a single JSON inventory object*@
			@*The table is then populated with the JSON object*@
			@*The table is then updated every time a new item is added to the cart*@
			<h1>Cart</h1>
			<table class="table table-striped show_items" id="invoiceTable">
				<thead>
					<tr class="bg-info">
						<th>
							<label>Name</label>
						</th>
						<th>
							<label>Price</label>
						</th>
						<th>
							<label>Quantity</label>
						</th>
						<th>
							<label>Remove from Cart</label>
						</th>
					</tr>
				</thead>
				<tbody id="cartData">
					@*add a new item (name, price, quantity) by a given UPC code*@
					@*the item is added to the cart, and the cart is updated*@
					@*the cart is then displayed in the table*@
					@*Use the "Buy(string UPC) function / HttpContext.Session["cart"] to update the table *@

					@{
						var cart = (List<Inventory>)HttpContextAccessor.HttpContext.Session.GetObjectFromJson<List<Inventory>>("cart");
						var invoiceLines = (List<InvoiceLine>)HttpContextAccessor.HttpContext.Session.GetObjectFromJson<List<InvoiceLine>>("invoiceLines");
						if (invoiceLines != null)
						{
								foreach (Inventory item in cart)
								{
									var invoiceLine = invoiceLines.FirstOrDefault(line => line.InventoryUPC == item.UPC);
								
														@*Log invoice lines to console*@
														@if (invoiceLine != null && invoiceLine.Quantity != 0){
									foreach (InvoiceLine line in invoiceLines)
									{
										Console.WriteLine("InvoiceLine");
										Console.WriteLine("UPC: " + line.InventoryUPC);
										Console.WriteLine("SalePrice: " +line.SalePrice);
										Console.WriteLine("Quantity: " +line.Quantity);
										Console.WriteLine("InvoiceID: " +line.InvoiceID);
									
									}
									var quantity = invoiceLine != null ? invoiceLine.Quantity : 0;
									var price = invoiceLine != null ? invoiceLine.SalePrice : 0;
								
																																														<tr class="table-hover" id="row_@item.UPC">
																																															<td>
																																																@Html.DisplayFor(modelItem => item.Name)
																																															</td>
																																															<td>
																																																@price
																																															</td>
																																															<td>
																																																<input type="number" id="quantity_@item.UPC" class="quantity-input" value="@quantity" min="0" onchange="updateQuantity('@item.UPC', this.value)" autocomplete="off" />

																																															</td>
																																															<td>
																																																<a href="@Url.Action("RemoveFromCart", "POS", new {UPC = item.UPC})"><i class="fa fa-minus-square" aria-hidden="true" style="color:black"></i></a>
																																															</td>
																																														</tr>
								
								}
							}
						}
					}

				</tbody>
			</table>
			
			</div>

		<div class="pay_amount" id="cartSummaryData">
				@*Subtotal, Tax, Total, Paid, Change*@
				@*Using Summary, returning json result of these properties, display in an unordered list*@
				@*Use the "Summary" function to update the summary data *@
				@*Use the "ClearCart" function to clear the cart and the summary data *@
				@*Use the "Pay" function to display the payment data *@
				@*Use the "Pay" function to clear the cart and the summary data *@
				<ul class="list-group list-group-flush">
					@{
						double total = 0;
						double tax = 0;
						double subtotal = 0;
						double paid = 0;
						double change = 0;

						if (cart != null)
						{
							foreach (InvoiceLine item in invoiceLines)
							{
								subtotal += item.Quantity * item.Inventory.MarkupPrice;
								tax = subtotal * 0.13;
								total = subtotal + tax;

							}
						}
																																		<table>
																																			<thead>
																																				<tr>
																																					<th>Item</th>
																																					<th>Value</th>
																																				</tr>
																																			</thead>
																																			<tbody>
																																				<tr>
																																					<td>Subtotal</td>
																																					<td id="subtotal">@subtotal.ToString("C")</td>
																																				</tr>
																																				<tr>
																																					<td>Tax</td>
																																					<td id="tax">@tax.ToString("C")</td>
																																				</tr>
																																				<tr>
																																					<td>Total</td>
																																					<td id="total">@total.ToString("C")</td>
																																				</tr>
																																				<tr>
																																					<td>Paid</td>
																																					<td id="paid">@paid.ToString("C")</td>
																																				</tr>
																																				<tr>
																																					<td>Remainder</td>
																																					<td id="remainder">@change.ToString("C")</td>
																																				</tr>
																																				<tr>
																																					<td>Change</td>
																																					<td id="change">@change.ToString("C")</td>
																																				</tr>
																																			</tbody>
																																		</table>
					}
				</ul>
			</div>
	</form>
	<div id="cartPayment" class="checkout">
				@*Payment Type: user selects between cash, debit, credit, or cheque (radio buttons? user can only select one option at a time). User enters payment amount in an input on the next line.*@
				@*Checkout, Clear buttons*@
				@*Use the "Pay" function to update the payment data *@
				@*Use the "Pay" function to clear the cart and the summary data *@
				@*Use the "ClearCart" function to clear the cart and the summary data *@

		
				<form id="paymentForm" method="post" action="@Url.Action("Create", "Invoices")">
					<label class="control-label" style="font-weight:bold">Select Payment Details...</label>
			<div id="chkContainer" class="outer-payment-container">
				<div class="payment-container">
					<input type="radio" id="cash" class="chkPayment" name="paymentType" value="1" required>
					<label class="lblPayment" for="cash">Cash</label>
					</div>
				<div class="payment-container">
					<input type="radio" id="debit" name="paymentType" class="chkPayment" value="2" required>
						<label class="lblPayment" for="debit">Debit</label>
					</div>
					<div class="payment-container">
						<input type="radio" id="credit" name="paymentType" class="chkPayment" value="3" required>
					<label class="lblPayment" for="credit">Credit</label>
					</div>
				<div class="payment-container">
						<input type="radio" id="cheque" name="paymentType" class="chkPayment" value="4" required>
					<label class="lblPayment" for="cheque">Cheque</label>
					</div>
			</div>
					<div>
						<label for="paymentAmount">Payment Amount:</label>
						<input type="number" id="paymentAmount" name="paymentAmount" placeholder="Enter payment amount" required>
					</div>
			<button name="actionButton" value="Pay" type="submit" class="btn btn-primary checkout-margin btnCheckout" onclick="submitForm(event)">Pay</button>

					
					
				</form>



			</div>
	<div class="checkout">
		@using (Html.BeginForm("ClearCart", "POS", FormMethod.Post))
		{
			<button name="actionButton" id="clearCart" value="Clear" class="btn btn-primary btnClear" type="submit" style="">Clear Cart</button>
		}

		<div id="invoice-buttons">
			@*IMPORTANT - KEEP THIS DIV!!!*@
			@*Invoice buttons (View Invoice, Download as PDF) are added here after succesful payment.*@
		</div>
	</div>

	
	
</main>



<script>
	console.log("Javascript loaded...")

	$(function () {
		$('form').submit(function (event) {
			var form = $(this);
			var url = form.attr('action');
			var data = form.serialize();
			var filterButton = form.find('button[name="actionButton"]');

			if (filterButton.length && filterButton.val() === "FilterCustomer") {
				@*Reset inputCustomer input field*@
					$('#inputCustomer').val('');
				event.preventDefault();
				$.ajax({
					url: url,
					type: 'POST',
					data: data,
					success: function (result) {
						$('#customer-details').html(result);
						sessionStorage.setItem('customerDetails', result);
					}
				});
			}
		});
	});

	//var customerDetails = sessionStorage.getItem('customerDetails');
	if (customerDetails !== null) {
		$('#customer-details').html(customerDetails);
	}
	

	var customerID = $('#CustomerID').val(); // get the customer ID from the hidden input field
	//function to redirect to Customer details page with current customer ID
	function viewCustomerDetails(custID) {
		window.location.href = "/Customers/Details/" + custID;
	}
	
	function processPayment() {
		const paymentAmount = parseFloat(document.getElementById('paymentAmount').value);
		const total = parseFloat(document.getElementById('total').textContent.replace(/[^\d.-]/g, ''));

		if (isNaN(paymentAmount) || paymentAmount <= 0) {
			alert('Invalid payment amount. Please enter a valid number.');
			return false;
		}
		let paid = parseFloat(document.getElementById('paid').textContent.replace(/[^\d.-]/g, ''));
		let remainder = parseFloat(document.getElementById('remainder').textContent.replace(/[^\d.-]/g, ''));
		let change = parseFloat(document.getElementById('change').textContent.replace(/[^\d.-]/g, ''))

		if (total > paid || remainder > 0) {

			if (isNaN(paid)) {
				paid = 0;
			}
			if (isNaN(remainder)) {
				remainder = total;
			}

			if (paymentAmount < remainder) {
				//there will be a remainder / additional payment
			}
			
			paid += paymentAmount;
			remainder = total - paid;
			change = paid - total;

			if (remainder < 0) {//remainder cannot be below 0
				remainder = 0;
			}
			document.getElementById('paid').textContent = '$' + paid.toFixed(2);
			document.getElementById('remainder').textContent = '$' + remainder.toFixed(2);
			if (remainder <= 0) 
			{
				alert(`Payment complete. Change: ${(change).toFixed(2)}`);
				document.getElementById('change').textContent = '$' + change.toFixed(2);
				return true;
			}
			else
			{
				alert(`Payment amount remaining: ${remainder.toFixed(2)}`);
			}
		}
	}

	function updateQuantity(upc, newQuantity) {
    $.ajax({
        type: "POST",
        url: "/POS/UpdateQuantity",
        data: { "upc": upc, "newQuantity": newQuantity },
        dataType: "json",
        success: function (response) {
            if (response.success) {
                console.log(response.message);
                // If the new quantity is 0, remove the row from the table
                if (parseInt(newQuantity) == 0) {
                    var row = document.getElementById("row_" + upc);
                    row.remove();
                    console.log("row removed");
                } else {
                    // If the new quantity is not 0, update the quantity input
                    var quantityInput = document.getElementById("quantity_" + upc);
                    quantityInput.value = newQuantity;
                }
                // Update the summary values
                document.getElementById("subtotal").innerHTML = "$" + response.subtotal.toFixed(2);
				document.getElementById("tax").innerHTML = "$" + response.tax.toFixed(2);
				document.getElementById("total").innerHTML = "$" + response.total.toFixed(2);

            }
			else {
				//error from controller.
				console.log("response: " + response);
                console.log(response.message);
				alert(response.message);
				// set the quantity back to the original value
				var quantityInput = document.getElementById("quantity_" + upc);
				quantityInput.value = response.oldQuantity;
				console.log("og quantity: " + response.oldQuantity)
				
				
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus, errorThrown);
        }
    });
}







	function submitForm(e) {
		e.preventDefault();
		var paymentID = $('input[name="paymentType"]:checked').val(); // get the selected paymentID from the radio buttons
		if(paymentID == null || paymentID == undefined){
			alert("Please select a payment method!");
			return false;
		}
		console.log("cart length#: " + document.getElementById('invoiceTable').rows.length);
		if (document.getElementById('invoiceTable').rows.length <= 1) {
			alert("Please make sure there is at least one item in your cart. Correct this error by adding items from the inventory to the cart with the 'add to cart' button");
			return false;
		}
		var customerID = $('#CustomerID').val(); // get the customer ID from the hidden input field
		if (customerID == null) {
			alert("Please select a customer.")
			return false;
		}
		if(!processPayment())
		{
			return false;
		}
		var form = $('#paymentForm');
		var url = form.attr('action');
		
		var date = new Date().toISOString().substr(0, 10); // get today's date
		console.log("date: " + date);

		var invoiceModel = {
			Date: '2000-01-01',
			Appreciation: 5.00,
			Description: "Sales Invoice",
			CustomerID: customerID,
			EmployeeID: 1,
			InvoicePayments:[
				{
					PaymentID : paymentID //this needs to be set to  paymentID
				}
			]
		};
		var payButton = form.find('button[name="actionButton"][value="Pay"]');
		var clearButton = form.find('button[name="actionButton"][value="Clear"]');
		console.log('clearButton' + clearButton)
		console.log("Invoice Model:", invoiceModel);
		
		$.ajax({
			url: '/Invoices/Create',
			dataType: 'json',
			contentType: 'application/json',
			type: 'POST',
			data: JSON.stringify(invoiceModel),
			//beforeSend: function (xhr) {
			//	xhr.setRequestHeader("X-CSRF-TOKEN", $('input[name="__RequestVerificationToken"]').val());
			//},
			success: function (result) {
				//console.log("submitForm (Payment) result: " + JSON.parse(response));
				for (var prop in result) {
				  console.log("prop:" +prop + ": " + result[prop]);
				}
				console.log("Errors:", result.errors); // log errors object
				console.log("Errors as string:", JSON.stringify(result.errors)); // log errors object as a string
				if (result) {
					//alert("Payment success: Invoice ID " + result.id + " for CustomerID: " + result.customerID + " was added on " + result.date);

					//Create a button to view the invoice that was just created (at /Invoices/Details/{id})
					var invoiceButton = $('<button>')
						.attr('type', 'button')
						.attr('onclick', 'window.location.href = \'/Invoices/Details/' + result.id + '\'')
						.addClass('btn btn-primary')
						.text('Invoice Details');
					//Create a button to download the invoice as a pdf
					var downloadButton = $('<button>')
						.attr('type', 'button')
						.attr('onclick', 'window.location.href = \'/Invoices/DownloadPDF/' + result.id + '\'')
						.addClass('btn btn-primary')
						.text('Download as PDF');

					$('#invoice-buttons').empty().append(invoiceButton);
					$('#invoice-buttons').append(downloadButton);
					
					payButton.prop('disabled', true);
					// Disable the Clear Cart button
					$('#clearCart').prop('disabled', true);

				} else {
					alert("payment failed");
					//provide error message
				}
			},
			error: function (xhr, status, error) {
				//alert xhr response text:
				let errorType = '';

				if (xhr.responseText === 'No invoice lines found') {
					errorType = 'no-invoice-lines';
				} else if (xhr.responseText === 'Invalid quantity') {
					errorType = 'invalid-quantity';
				} else if (xhr.responseText.includes('The field CustomerID must be between')) {
					errorType = 'invalid-customer-id';
				} else if (xhr.responseText.includes('PaymentID')) {
					errorType = 'invalid-payment-method';
				}

				switch (errorType) {
					case 'no-invoice-lines':
						alert('No invoice lines found. To correct this error, make sure you have at least one item in the cart before proceeding to pay.');
						break;
					case 'invalid-quantity':
						alert('Invalid quantity. Please enter a valid number for the quantity.');
						break;
					case 'invalid-customer-id':
						alert('Invalid customer ID. Please select a valid customer at the top of the page.');
						break;
					case 'invalid-payment-method':
						alert('Invalid payment method. Please select a valid payment method before continuing.');
						break;
					default:
						alert(xhr.responseText);
						break;
				}
				
				console.log("xhr response text: ", xhr.responseText);
				console.log("submitForm error:", error);
				console.log("submitForm xhr:", xhr);
				console.log("submitForm status:", status);
			}
		});
		
	}






</script>








